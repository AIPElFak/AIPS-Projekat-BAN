function drawElipticWraper(e, a, t, r, n, s, o, l, i, d) { for (var B = 0; B < l; ++B) { r = 2 * a; for (var p = [], c = e; c >= 0; c--)for (var u = 0; u <= 1; u++) { var h = r * Math.cos(Math.PI - c * Math.PI / e), A = o + n, m = t / 2 + r * Math.sin(Math.PI - c * Math.PI / e); 0 == u ? (m *= -1, p[e - c] = new BABYLON.Vector3(h, A, m)) : p[e + 1 + c] = new BABYLON.Vector3(h, A, m) } var h = r, A = o + n, m = -t / 2; o += n, a -= s, s += i, p[2 * e + 2] = new BABYLON.Vector3(h, A, m), d.push(p) } return a } function drawTable(e, a, t, r, n, s, o, l) { var i = 30, d = e, B = 3 * d, p = 3 * d / 2, c = d / 250, u = 0, h = 0, A = 30, m = d / 31250, L = []; d = drawElipticWraper(i, d, B, p, c, u, h, A, m, L), h += c * A, d = drawElipticWraper(i, d, B = 3 * d, p, c = d / 2500, u = d / 2500, h, A = 10, m, L), h += c * A, d = drawElipticWraper(i, d, B = 3 * d, p, c = d / 2777, u = d / 3571, h, A = 15, m, L), h += c * A, d = drawElipticWraper(i, d, B = 3 * d, p, c = d / 25e3, u = d / 2857, h, A = 15, m, L), h += c * A, d = drawElipticWraper(i, d, B = 3 * d, p, c = -d / 25e3, u = d / 2857, h, A = 15, m, L), h += c * A, d = drawElipticWraper(i, d, B = 3 * d, p, c = -d / 2777, u = d / 3571, h, A = 15, m, L), h += c * A; var y = []; B = 3 * (d = drawElipticWraper(i, d, B = 3 * d, p, c = -d / 250, u = 0, h, A = 17, m, y)), h += c * A, A = 17, u = d / 680, c = -d / 2500, L.push(y[0]), BABYLON.Mesh.CreateRibbon("rib", L, !1, !1, 0, scene).material = a, d = drawElipticWraper(i, d, B, p, c, u, h, A, m, y), BABYLON.Mesh.CreateRibbon("rib2", y, !1, !1, 0, scene).material = t; var O = []; B = 3.1 * (d += u), p = 2 * d; for (var w = i = 30; w >= 0; w--) { for (var C = [], f = 0; f <= 1; f++) { var Y = p * Math.cos(Math.PI - w * Math.PI / i), N = h, b = B / 2 + p * Math.sin(Math.PI - w * Math.PI / i); 1 == f && (b *= -1), C.push(new BABYLON.Vector3(Y, N, b)) } O.push(C) } BABYLON.Mesh.CreateRibbon("rib3", O, !1, !1, 0, scene).material = r, drawAllPlayingCardPositions(1.3 * d, h, B, p), drawAllPlayingChipPositions(d, h, B, p), drawAllAvatars(d, h, B, p), drawAllUsernamesAndAmounts(d) } function drawElipticBase(e, a, t, r) { for (var n = [], s = e; s >= 0; s--) { for (var o = [], l = 0; l <= 1; l++) { var i = a * Math.cos(Math.PI - s * Math.PI / e), d = t, B = r / 2 + a * Math.sin(Math.PI - s * Math.PI / e); 0 == l && (B *= -1), o.push(new BABYLON.Vector3(i, d, B)) } n.push(o) } for (var p = new Array(2 * e + 1), c = -a, u = a - c, h = r / 2 + a, A = -h, m = h - A, L = 0; L < e + 1; ++L) { var y = (n[L][0].x - c) / u, O = (n[L][0].z - A) / m, w = (n[L][1].x - c) / u, C = (n[L][1].z - A) / m; p[2 * L] = new BABYLON.Vector2(y, O), p[2 * L + 1] = new BABYLON.Vector2(w, C) } return BABYLON.MeshBuilder.CreateRibbon("rib", { pathArray: n, sideOrientation: BABYLON.Mesh.DOUBLESIDE, offset: 0, uvs: p, invertUV: !0 }, scene) } var model = { cardTextures: [], chipTextures: [], playerCards: new Array, tableCards: new Array, playerChips: new Array, tableChips: new Array, playerMoney: new Array, playerMoneyAmount: new Array, playerChipAmount: new Array, playerStakes: new Array, usernames: new Array, avatars: new Array, playerTableMoney: new Array, playerTableMoneyAmount: new Array, tableChipAmount: 0, noShownCards: 0, camera: 0, sounds: new Array, init: function () { this.sounds.raise = new Audio("../Content/sounds/raise.mp3"), this.sounds.fold = new Audio("../Content/sounds/fold.mp3"), this.sounds.check = new Audio("../Content/sounds/check.mp3"), this.sounds.flop = new Audio("../Content/sounds/flop.mp3"), this.sounds.wait = new Audio("../Content/sounds/wait.mp3") }, setAvatar: function (e, a) { "undefined" != this.avatars[e].material && this.avatars[e].material.dispose(), this.avatars[e].material = new BABYLON.StandardMaterial(e + "avatar", scene), this.avatars[e].material.diffuseTexture = new BABYLON.Texture(a, scene), this.avatars[e].material.diffuseTexture.hasAlpha = !0, this.avatars[e].material.emissiveColor = new BABYLON.Color3(1, 1, 1), this.avatars[e].setEnabled(1) }, removeAvatar: function (e) { var a = avatars[e]; a.material.dispose(), a.setEnabled(0) }, getCardTexture: function (e) { if (void 0 === this.cardTextures[e]) { var a = new BABYLON.StandardMaterial(e, scene); a.alpha = 1, a.diffuseColor = new BABYLON.Color3(1, 1, 1), a.backFaceCulling = !1, a.diffuseTexture = new BABYLON.Texture("../Scripts/textures/" + e + ".png", scene), this.cardTextures[e] = a } return this.cardTextures[e] }, changePlayerChipAmount: function (e, a) { this.setPlayerChips(e, a + this.playerChipAmount[e]) }, changePlayerTableMoneyAmount: function (e, a) { this.setPlayerTableMoneyAmount(e, a + this.playerTableMoneyAmount[e]) }, getChipTexture: function (e) { if (void 0 === this.chipTextures[e]) { var a = new BABYLON.StandardMaterial(e, scene); a.alpha = 1, a.diffuseColor = new BABYLON.Color3(1, 1, 1), a.backFaceCulling = !1, a.diffuseTexture = new BABYLON.Texture("../Scripts/textures/" + e + ".png", scene), this.chipTextures[e] = a } return this.chipTextures[e] }, setPlayerCards: function (e, a, t) { this.playerCards[e][0].setEnabled(1), this.playerCards[e][0].material = this.getCardTexture(a), this.playerCards[e][1].setEnabled(1), this.playerCards[e][1].material = this.getCardTexture(t) }, setTableCard: function (e, a) { this.tableCards[e].setEnabled(1), this.tableCards[e].material = this.getCardTexture(a) }, setPlayerMoney: function (e, a) { this.playerMoney[e] = a }, setPlayerChips: function (e, a) { var t = this.findChipsForSum(a, 20); this.playerChipAmount[e] = a; for (var r = 0; r < 20; ++r)void 0 === t[r] ? (this.playerChips[e][r][0].setEnabled(0), this.playerChips[e][r][1].setEnabled(0), this.playerChips[e][r][2].setEnabled(0)) : (this.playerChips[e][r][0].setEnabled(1), this.playerChips[e][r][1].setEnabled(1), this.playerChips[e][r][2].setEnabled(1), this.playerChips[e][r][0].material = this.getChipTexture("" + t[r]), this.playerChips[e][r][1].material = this.getChipTexture("" + t[r]), this.playerChips[e][r][2].material = this.getChipTexture("" + t[r])); setStakes(e, a) }, setPlayerTableMoneyAmount: function (e, a) { this.playerTableMoneyAmount[e] = a, setMoneyAmount(e, a) }, setTableChips: function (e) { var a = this.findChipsForSum(e, 20); this.tableChipAmount = e; for (var t = 0; t < 20; ++t)void 0 === a[t] ? (this.playerChips[8][t][0].setEnabled(0), this.playerChips[8][t][1].setEnabled(0), this.playerChips[8][t][2].setEnabled(0)) : (this.playerChips[8][t][0].setEnabled(1), this.playerChips[8][t][1].setEnabled(1), this.playerChips[8][t][2].setEnabled(1), this.playerChips[8][t][0].material = this.getChipTexture("" + a[t]), this.playerChips[8][t][1].material = this.getChipTexture("" + a[t]), this.playerChips[8][t][2].material = this.getChipTexture("" + a[t])); setStakes(8, e) }, changeTableChips: function (e) { this.setTableChips(this.tableChipAmount + e) }, resetSceen: function () { this.noShownCards = 0, this.setTableChips(0); for (e = 0; e < 8; ++e)this.setPlayerChips(e, 0), this.playerCards[e][0].setEnabled(0), this.playerCards[e][1].setEnabled(0); for (var e = 0; e < 5; ++e)this.tableCards[e].setEnabled(0) }, findChipsForSum: function (e, a) { for (var t = [100, 500, 1e3, 5e3, 25e3, 1e5, 25e4, 5e5, 1e6], r = [], n = 0, s = 8, o = e; 0 != o && n != a && s >= 0;)o >= t[s] ? (o -= t[s], r.push(t[s]), n++) : s--; return r }, eliminatePlayer: function (e) { this.setPlayerChips(e, 0), this.playerCards[e][0].setEnabled(0), this.playerCards[e][1].setEnabled(0), this.setUsername(e, "") }, setUsername: function (e, a) { setUsername(e, a) } }, check = function () { raiseAmount = 0, readyToPlay = !0, disableButtons(), commitAction() }, fold = function () { raiseAmount = -1, readyToPlay = !0, disableButtons(), commitAction() }, raise = function () { raiseAmount = parseInt(document.getElementById("raiseMoney").value), readyToPlay = !0, disableButtons(), commitAction() }, disableButtons = function () { document.getElementById("raise").disabled = !0, document.getElementById("call").disabled = !0, document.getElementById("fold").disabled = !0 }, enableButtons = function () { document.getElementById("raise").disabled = !1, document.getElementById("call").disabled = !1, document.getElementById("fold").disabled = !1 }, setTableCard = function (e, a) { if (model.noShownCards <= e) { var t = 500; 2 !== e && 3 !== e || (t *= e), setTimeout(function (e, a) { model.setTableCard(e, a), model.sounds.flop.play(), pileUp() }, t, e, a), model.noShownCards++ } }, setPlayerChips = function (e, a) { model.changePlayerChipAmount(e, a), model.changePlayerTableMoneyAmount(e, -a) }, resetPlayerChips = function () { for (var e = 0; e < 8; ++e)model.setPlayerChips(e, 0) }, setPlayerTableChips = function (e, a) { PlayerTableChips[e] = a }, setPlayerCard = function (e, a, t) { model.setPlayerCards(e, a, t) }, setPlayerStats = function (e, a, t, r) { model.setUsername(a, e), model.setAvatar(a, r), PlayerTableChips[a] = t, model.setPlayerTableMoneyAmount(a, t) }, positionPlayer = function (e) { myPositon = e, e < 2 || e > 5 ? (model.camera.setPosition(new BABYLON.Vector3(-50, 45, 0)), model.avatars[2].position.y *= 3.5, model.avatars[3].position.y *= 3.5, model.avatars[4].position.y *= 3.5, model.avatars[5].position.y *= 3.5, model.usernames[2].translate(new BABYLON.Vector3(0, 10, 2), 1, BABYLON.Space.WORLD), model.usernames[3].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.usernames[4].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.usernames[5].translate(new BABYLON.Vector3(0, 10, -2), 1, BABYLON.Space.WORLD), model.usernames[0].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.usernames[1].translate(new BABYLON.Vector3(0, -8, 2), 1, BABYLON.Space.WORLD), model.usernames[6].translate(new BABYLON.Vector3(0, -8, 2), 1, BABYLON.Space.WORLD), model.usernames[7].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[2].translate(new BABYLON.Vector3(0, 10, 4), 1, BABYLON.Space.WORLD), model.playerTableMoney[3].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[4].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[5].translate(new BABYLON.Vector3(0, 10, -4), 1, BABYLON.Space.WORLD), model.playerTableMoney[0].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[1].translate(new BABYLON.Vector3(0, -8, 4), 1, BABYLON.Space.WORLD), model.playerTableMoney[6].translate(new BABYLON.Vector3(0, -8, 4), 1, BABYLON.Space.WORLD), model.playerTableMoney[7].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD)) : (model.avatars[0].position.y *= 3.5, model.avatars[1].position.y *= 3.5, model.avatars[6].position.y *= 3.5, model.avatars[7].position.y *= 3.5, model.usernames[2].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.usernames[3].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.usernames[4].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.usernames[5].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.usernames[0].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.usernames[1].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.usernames[6].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.usernames[7].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[2].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[3].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[4].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[5].translate(new BABYLON.Vector3(0, -8, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[0].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[1].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[6].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD), model.playerTableMoney[7].translate(new BABYLON.Vector3(0, 10, 0), 1, BABYLON.Space.WORLD)) }, playMan = function (e, a, t) { enableButtons(); var r = document.getElementById("call"); r.innerHTML = 0 == a ? "Check" : "Call " + a, maxRaise(a), model.sounds.wait.play() }, commitAction = function () { if (readyToPlay) model.sounds.wait.pause(), model.sounds.wait.currentTime = 0, readyToPlay = !1, gameHub.server.play(raiseAmount, gameModel.gameName), raiseAmount < 0 && model.sounds.fold.play(), 0 == raiseAmount && model.sounds.check.play(), raiseAmount > 0 && model.sounds.raise.play(); else { model.sounds.wait.pause(), model.sounds.wait.currentTime = 0; var e = document.getElementById("call"); "Check" == e.innerHTML ? (gameHub.server.play(0, gameModel.gameName), model.sounds.check.play()) : (e.innerHTML = "Check", gameHub.server.play(-1, gameModel.gameName), model.sounds.fold.play()) } }, displayMove = function (e, a) { a < 0 ? (model.eliminatePlayer(e), model.sounds.fold.play()) : (model.changePlayerChipAmount(e, a), model.changePlayerTableMoneyAmount(e, -a), PlayerChips[e] += a, 0 === a ? model.sounds.check.play() : model.sounds.raise.play()) }, pileUp = function () { for (var e = 0, a = 0; a < 8; ++a)e += model.playerChipAmount[a], model.setPlayerChips(a, 0); model.changeTableChips(e) }, resetSceen = function () { model.resetSceen() }, showWinner = function (e) { model.changePlayerTableMoneyAmount(e, model.tableChipAmount) }, maxRaise = function (e) { for (var a = 0, t = 0; t < 8; ++t)if ("undefined" != model.playerChipAmount[t]) { var r = model.playerTableMoneyAmount[t] - e + model.playerChipAmount[t]; r > a && (a = r) } document.getElementById("money").value = a }; myPositon = 0; var canvas = document.querySelector("#renderCanvas"), engine = new BABYLON.Engine(canvas, !0), timer, TableCards = new Array(5), PlayerCards = new Array(16), Usernames = new Array(8), PlayerTableChips = [0, 0, 0, 0, 0, 0, 0, 0], PlayerChips = [0, 0, 0, 0, 0, 0, 0, 0], PileChips = 0, activePlayers = new Array(8), noShownCards = 0, readyToPlay = !1, raiseAmount = 0, scene = new BABYLON.Scene(engine); model.scene = scene, model.init(); var drawAllPlayingCardPositions = function (e, a, t, r) { drawAParOfCCards(e, a, .8 * r, .3 * -t, Math.PI, 0), drawAParOfCCards(e, a, .8 * r, .3 * t, Math.PI, 7), drawAParOfCCards(e, a, .8 * r, -t / 2, 11 * Math.PI / 15, 1), drawAParOfCCards(e, a, .8 * r, t / 2, 11 * -Math.PI / 15, 6), drawAParOfCCards(e, a, .8 * r, -t / 2, 6 * Math.PI / 15, 2), drawAParOfCCards(e, a, .8 * r, t / 2, 6 * -Math.PI / 15, 5), drawAParOfCCards(e, a, .8 * r, -t / 2, Math.PI / 15, 3), drawAParOfCCards(e, a, .8 * r, t / 2, -Math.PI / 15, 4) }, drawAParOfCCards = function (e, a, t, r, n, s) { var o = drawCardPosition(e), l = drawCardPosition(e); o.rotate(BABYLON.Axis.Y, n, BABYLON.Space.LOCAL), o.translate(new BABYLON.Vector3(t, 0, 0), 1, BABYLON.Space.LOCAL), o.translate(new BABYLON.Vector3(0, 0, r), 1, BABYLON.Space.WORLD), o.translate(new BABYLON.Vector3(0, 1.1 * a, .115 * -e), 1, BABYLON.Space.LOCAL), o.rotate(BABYLON.Axis.Y, .8 * Math.PI / 2, BABYLON.Space.LOCAL), l.rotate(BABYLON.Axis.Y, n, BABYLON.Space.LOCAL), l.translate(new BABYLON.Vector3(t, 0, 0), 1, BABYLON.Space.LOCAL), l.translate(new BABYLON.Vector3(0, .1, r), 1, BABYLON.Space.WORLD), l.translate(new BABYLON.Vector3(0, 1.1 * a, .115 * e), 1, BABYLON.Space.LOCAL), l.rotate(BABYLON.Axis.Y, 1.2 * Math.PI / 2, BABYLON.Space.LOCAL), model.playerCards[s] = new Array, model.playerCards[s][0] = o, model.playerCards[s][1] = l }, drawCardPosition = function (e) { for (var a = [], t = e / 45, r = 11 * t, n = 20 * t, s = 1.4 * t, o = 10; o >= 0; o--) { for (var l = [], i = 0; i <= 1; i++) { var d = (r - 2 * s) / 2 + s * Math.cos(Math.PI / 2 - o * Math.PI / 20), B = 0, p = n / 2 + s * Math.sin(Math.PI / 2 - o * Math.PI / 20); 0 == i && (p *= -1), l.push(new BABYLON.Vector3(d, B, p)) } a.push(l) } for (o = 10; o >= 0; o--) { for (var l = [], i = 0; i <= 1; i++) { var d = -r / 2 + s * Math.cos(Math.PI - o * Math.PI / 20), B = 0, p = n / 2 + s * Math.sin(Math.PI - o * Math.PI / 20); 0 == i && (p *= -1), l.push(new BABYLON.Vector3(d, B, p)) } a.push(l) } for (var c = new Array(21), u = -r / 2 - s, h = (r - 2 * s) / 2 + s - u, A = n / 2 + s, m = -A, L = A - m, y = 0; y < 22; ++y) { var O = (a[y][0].x - u) / h, w = (a[y][0].z - m) / L, C = (a[y][1].x - u) / h, f = (a[y][1].z - m) / L; c[2 * y] = new BABYLON.Vector2(O, w), c[2 * y + 1] = new BABYLON.Vector2(C, f) } return BABYLON.MeshBuilder.CreateRibbon("rib", { pathArray: a, sideOrientation: BABYLON.Mesh.DOUBLESIDE, offset: 0, uvs: c, invertUV: !0 }, scene) }, drawTableCards = function (e) { for (var a = 0; a < 5; ++a) { var t = drawCardPosition(e); t.rotate(BABYLON.Axis.Y, Math.PI / 2, BABYLON.Space.LOCAL), t.translate(new BABYLON.Vector3(e / 2 * a - e, .1 * e, 0), 1, BABYLON.Space.LOCAL), model.tableCards[a] = t } }, drawAvatar = function (e, a, t, r, n) { var s = .8 * e, o = BABYLON.Mesh.CreatePlane("plane" + n, s, scene, !1, BABYLON.Mesh.DOUBLESIDE); o.billboardMode = BABYLON.AbstractMesh.BILLBOARDMODE_ALL, o.material = new BABYLON.StandardMaterial("outputplane" + n, scene), o.position = new BABYLON.Vector3(a, t, r), o.setEnabled(0), model.avatars[n] = o; o.position }, drawAllAvatars = function (e, a, t, r) { drawAvatar(e, 2.6 * -e, .089973 * e, -.916 * e, 0), drawAvatar(e, 2.6 * -e, .089973 * e, .916 * e, 7), drawAvatar(e, 1.73974 * -e, .089973 * e, -3.43066 * e, 1), drawAvatar(e, 1.73974 * -e, .089973 * e, 3.43066 * e, 6), drawAvatar(e, .80344 * e, .089973 * e, -3.96073 * e, 2), drawAvatar(e, .80344 * e, .089973 * e, 3.96073 * e, 5), drawAvatar(e, 2.54318 * e, .089973 * e, -2.06608 * e, 3), drawAvatar(e, 2.54318 * e, .089973 * e, 2.06608 * e, 4) }; drawAllUsernamesAndAmounts = function (e) { for (var a = e / 15, t = 0; t < 8; ++t) { var r = drawBubble(a), n = drawBubble(a); r.position.x = model.avatars[t].position.x, r.position.y = model.avatars[t].position.y, r.position.z = model.avatars[t].position.z, n.position.x = model.avatars[t].position.x, n.position.y = model.avatars[t].position.y, n.position.z = model.avatars[t].position.z, n.translate(new BABYLON.Vector3(0, 6 * -a, 2 * -a), 1, BABYLON.Space.WORLD), model.usernames[t] = r, model.playerTableMoney[t] = n } }; var setUsername = function (e, a) { model.usernames[e].material.diffuseTexture.getContext().clearRect(0, 0, 5325, 5325), "" != a ? model.usernames[e].material.diffuseTexture.drawText("   " + a, null, 450, "bold 500px verdana", "white") : model.usernames[e].material.diffuseTexture.update() }, setMoneyAmount = function (e, a) { model.playerTableMoney[e].material.diffuseTexture.getContext().clearRect(0, 0, 5325, 5325), 0 != a ? model.playerTableMoney[e].material.diffuseTexture.drawText("$" + a, null, 450, "bold 500px verdana", "white") : model.playerTableMoney[e].material.diffuseTexture.update() }, createScene = function () { scene.clearColor = new BABYLON.Color3(0, 0, .1445), model.camera = new BABYLON.ArcRotateCamera("camera1", 0, 0, 0, new BABYLON.Vector3(0, 0, 0), scene), model.camera.setPosition(new BABYLON.Vector3(50, 45, 0)), new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(1, 1, 1), scene).intensity = .9; var e = new BABYLON.StandardMaterial("mat1", scene); e.alpha = 1, e.diffuseColor = new BABYLON.Color3(.2067, .0432, .0432), e.backFaceCulling = !1; var a = new BABYLON.StandardMaterial("mat2", scene); a.alpha = 1, a.diffuseColor = new BABYLON.Color3(.4, .298, .0314), a.backFaceCulling = !1; var t = new BABYLON.StandardMaterial("mat3", scene); t.alpha = 1, t.diffuseColor = new BABYLON.Color3(.6863, .0824, .0824), t.backFaceCulling = !1; return drawTable(9, e, a, t), drawTableCards(9 * 1.3), scene }, scene = createScene(); engine.runRenderLoop(function () { scene.render() }), window.addEventListener("resize", function () { engine.resize() }), resetSceen(); var drawAllPlayingChipPositions = function (e, a, t, r) { var n = e / 19; drawChipPile(n, a, .8 * r, .3 * -t, Math.PI, 0), drawChipPile(n, a, .8 * r, .3 * t, Math.PI, 7), drawChipPile(n, a, .8 * r, -t / 2, 11 * Math.PI / 15, 1), drawChipPile(n, a, .8 * r, t / 2, 11 * -Math.PI / 15, 6), drawChipPile(n, a, .8 * r, -t / 2, 6 * Math.PI / 15, 2), drawChipPile(n, a, .8 * r, t / 2, 6 * -Math.PI / 15, 5), drawChipPile(n, a, .8 * r, -t / 2, Math.PI / 15, 3), drawChipPile(n, a, .8 * r, t / 2, -Math.PI / 15, 4), drawChipPile(n, a, .6 * -e, 0, 0, 8) }, drawChip = function (e) { var a = e, t = 3 * a / 2, r = a / 50, n = 0, s = 0, o = 30, l = [], i = drawElipticBase(30, t = 2 * a, s, 0); a = drawElipticWraper(30, a, 0, t = 3 * a / 2, r, n, s, o, 0, l), s += r * o, a = drawElipticWraper(30, a, 0, t, r = a / 2777, n = 0, s, o = 15, 0, l); var d = BABYLON.Mesh.CreateRibbon("rib", l, !1, !1, 0, scene), B = drawElipticBase(30, t = 2 * a, s, 0), p = []; return p.push(d), p.push(i), p.push(B), p }, drawChipPile = function (e, a, t, r, n, s) { var o, l = [0, 4 * e, 3.5 * e, 7.5 * e], i = [0, 2 * -e, 2.5 * e, .5 * e]; model.playerChips[s] = new Array; for (var d = 0; d < 4; ++d)0 == d ? o = drawStackOfChips(0, e, 5, a, t, r, n - 3 * Math.PI / 30, l[d], i[d], s) : drawStackOfChips(d, e, 5, a, t, r, n - 3 * Math.PI / 30, l[d], i[d], s); var B = drawBubble(e); B.position = o[0].position, B.translate(new BABYLON.Vector3(0, 6 * e, 0), 1, BABYLON.Space.LOCAL), model.playerStakes[s] = B }, drawStackOfChips = function (e, a, t, r, n, s, o, l, i, d) { for (var B, p = 0, c = !0, u = 0; u < t; ++u) { var h = drawChip(a); c && (B = h, c = !1), model.playerChips[d][e * t + u] = new Array; for (var A = 0; A < 3; ++A)h[A].rotate(BABYLON.Axis.Y, o, BABYLON.Space.LOCAL), h[A].translate(new BABYLON.Vector3(0, p, 0), 1, BABYLON.Space.LOCAL), h[A].translate(new BABYLON.Vector3(n, 0, 0), 1, BABYLON.Space.LOCAL), h[A].translate(new BABYLON.Vector3(0, 0, s), 1, BABYLON.Space.WORLD), h[A].translate(new BABYLON.Vector3(i, 1.1 * r, .115 * -a + l), 1, BABYLON.Space.LOCAL), model.playerChips[d][e * t + u].push(h[A]); p += .75 * a } return B }, findChipsForSum = function (e, a) { for (var t = [100, 500, 1e3, 5e3, 25e3, 1e5, 25e4, 5e5, 1e6], r = [], n = 0, s = 8, o = e; 0 != o && n != a && s >= 0;)o >= t[s] ? (o -= t[s], r.push(t[s]), n++) : s--; return r }, drawBubble = function (e) { for (var a = 1.5 * e, t = { height: 512, width: 5325 }, r = (new BABYLON.DynamicTexture("dynamic texture", t, scene, !0), []), n = 5 * (e = a / 5) * 15, s = 10 * e, o = 1.4 * e, l = 10; l >= 0; l--) { for (var i = [], d = 0; d <= 1; d++) { var B = (n - 2 * o) / 2 + o * Math.cos(Math.PI / 2 - l * Math.PI / 20), p = 0, c = s / 2 + o * Math.sin(Math.PI / 2 - l * Math.PI / 20); 0 == d && (c *= -1), i.push(new BABYLON.Vector3(B, c, p)) } r.push(i) } for (l = 10; l >= 0; l--) { for (var i = [], d = 0; d <= 1; d++) { var B = -n / 2 + o * Math.cos(Math.PI - l * Math.PI / 20), p = 0, c = s / 2 + o * Math.sin(Math.PI - l * Math.PI / 20); 0 == d && (c *= -1), i.push(new BABYLON.Vector3(B, c, p)) } r.push(i) } for (var u = new Array(21), h = -n / 2 - o, A = (n - 2 * o) / 2 + o - h, m = s / 2 + o, L = -m, y = m - L, O = 0; O < 22; ++O) { var w = (r[O][0].x - h) / A, C = (r[O][0].y - L) / y, f = (r[O][1].x - h) / A, Y = (r[O][1].y - L) / y; u[2 * O] = new BABYLON.Vector2(w, C), u[2 * O + 1] = new BABYLON.Vector2(f, Y) } var N = BABYLON.MeshBuilder.CreateRibbon("rib", { pathArray: r, sideOrientation: BABYLON.Mesh.DOUBLESIDE, offset: 0, uvs: u, invertUV: !0 }, scene); return N.billboardMode = BABYLON.AbstractMesh.BILLBOARDMODE_ALL, N.material = new BABYLON.StandardMaterial("outputplane", scene), N.material.emissiveColor = new BABYLON.Color3(1, 1, 1), N.material.diffuseTexture = new BABYLON.DynamicTexture("dynamic texture", t, scene, !0), N.material.diffuseTexture.drawText("", null, 450, "bold 500px verdana", "white"), N.material.diffuseTexture.hasAlpha = !0, N }, setStakes = function (e, a) { model.playerStakes[e].material.diffuseTexture.getContext().clearRect(0, 0, 5325, 5325), 0 != a ? model.playerStakes[e].material.diffuseTexture.drawText("$" + a, null, 450, "bold 500px verdana", "white") : model.playerStakes[e].material.diffuseTexture.update() };